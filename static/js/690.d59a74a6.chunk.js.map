{"version":3,"file":"static/js/690.d59a74a6.chunk.js","mappings":"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","sources":["webpack://react-way-of-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","webpack://react-way-of-samurai/./src/components/Dialogs/NewMessageForm/NewMessage.module.css?bc19","components/Dialogs/NewMessageForm/NewMessageForm.jsx","components/hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__gU34-\"};","import s from \"./DialogItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nexport default (props) => {\n    let path = `/dialogs/${props.id}`\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__rjHQQ\"};","import s from \"./Message.module.css\";\n\nexport default (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"fieldErrorText\":\"NewMessage_fieldErrorText__1UEsX\"};","import {Field, Form, Formik} from \"formik\";\nimport * as Yup from 'yup';\nimport styles from './NewMessage.module.css'\n\n\nconst NewMessageFormSchema = Yup.object().shape({\n    newMessageBody: Yup.string()\n        .min(5, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),\n});\n\n\nconst NewMessageForm = (props) => {\n    return (\n        <Formik\n            initialValues={{newMessageBody: ''}}\n            onSubmit={(values, {setSubmitting, resetForm}) => {\n                props.sendMessage(values.newMessageBody)\n                setSubmitting(false);\n                resetForm();\n            }}\n            validationSchema={NewMessageFormSchema}\n        >\n            {\n                ({errors, touched}) => {\n                    const newMessageBodyHasErrors = errors.newMessageBody && touched.newMessageBody\n\n                    return (\n                        <Form>\n                            <div>\n                                <Field\n                                    name='newMessageBody'\n                                    component='textarea'\n                                    placeholder=\"Enter your message\"\n                                />\n                                {\n                                    newMessageBodyHasErrors && <div className={styles.fieldErrorText}>{errors.newMessageBody}</div>\n                                }\n                            </div>\n                            <div>\n                                <button type='submit'>Send</button>\n                            </div>\n                        </Form>\n                    )\n                }\n            }\n\n        </Formik>\n    )\n}\n\nexport default NewMessageForm\n","import {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return {\n        me: state.auth.me\n    }\n}\n\nconst  withAuthRedirect = (Component) => {\n    let wrapped = (props) => {\n        if (!props.me) {\n            return (\n                <Redirect to=\"/login\"/>\n            )\n        }\n        return <Component {...props}/>\n    }\n    return connect(mapStateToProps)(wrapped)\n}\n\n\nexport default withAuthRedirect;\n","import Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport withAuthRedirect from \"../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state.messagesPage,\n    }\n}\n\nconst mapDispatchToProps = {\n    sendMessage\n}\n\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps),\n)(Dialogs)\n\n\n","import s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport NewMessageForm from \"./NewMessageForm/NewMessageForm\";\n\n\nexport default ({state, sendMessage}) => {\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>)\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id}\n                                                                  id={message.id}/>)\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <NewMessageForm sendMessage={sendMessage}/>\n            </div>\n        </div>\n    )\n}\n"],"names":["props","path","concat","id","_jsx","className","s","children","NavLink","to","name","message","NewMessageFormSchema","Yup","shape","newMessageBody","min","max","required","Formik","initialValues","onSubmit","values","_ref","setSubmitting","resetForm","sendMessage","validationSchema","_ref2","errors","touched","newMessageBodyHasErrors","_jsxs","Form","Field","component","placeholder","styles","type","mapStateToProps","state","me","auth","Component","connect","_objectSpread","Redirect","mapDispatchToProps","compose","withAuthRedirect","messagesPage","dialogsElements","dialogs","map","dialog","DialogItem","messagesElements","messages","Message","NewMessageForm"],"sourceRoot":""}